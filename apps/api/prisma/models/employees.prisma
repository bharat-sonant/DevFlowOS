model employees {
  id                                              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id                                      String      @db.Uuid
  employee_code                                   String      @db.Citext
  name                                            String
  email                                           String      @db.Citext
  password                                        String
  status                                          Int         @default(1)
  is_owner                                        Boolean     @default(false)
  created_at                                      DateTime    @default(dbgenerated("timezone('Asia/Kolkata'::text, now())")) @db.Timestamptz(6)
  created_by                                      String      @db.Uuid
  updated_at                                      DateTime?   @db.Timestamptz(6)
  updated_by                                      String?     @db.Uuid
  companies                                       companies   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employees_employees_created_byToemployees       employees   @relation("employees_created_byToemployees", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_employees_employees_created_byToemployees employees[] @relation("employees_created_byToemployees")
  employees_employees_updated_byToemployees       employees?  @relation("employees_updated_byToemployees", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_employees_employees_updated_byToemployees employees[] @relation("employees_updated_byToemployees")

  @@unique([company_id, employee_code], map: "unique_company_employee_code")
  @@unique([company_id, email], map: "unique_company_employee_email")
}
